* Introduction

Py4CL is a bridge between Common Lisp and Python, which enables Common
Lisp to call Python code. It uses streams to communicate with a
separate python process, the approach taken by [[https://github.com/marcoheisig/cl4py][cl4py]]. This is
different to the CFFI approach used by libraries such as [[https://github.com/pinterface/burgled-batteries][burgled-batteries]].

* Examples

The python subprocess can be started and stopped with `python-start` and `python-stop`.
`python-eval` evaluates an expression, converting the result to a suitable lisp type.

#+BEGIN_SRC lisp :results output
(python-start)

(princ (python-eval "[i**2 for i in range(5)]"))

(python-stop)
#+END_SRC

#+RESULTS:
: #(0 1 4 9 16)


* Messages formats

Messages consist of a single character, followed by a number (N) in string
format e.g. "12", a newline, then N characters. 

** Lisp to Python

The first character of the message describes the type of message:
- `x` means run `exec`, and is used for statements where no return
  value is expected e.g. `import` statements
- `e` means run `eval`, to evaluate an expression and return the
  result

** Python to Lisp

The first character can be:
- `r` indicates a return value
- `e` indicates an error, followed by a message
- `c` indicates a callback, calling a lisp function and expecting a
  value to be sent back to python

Strings sent to Lisp are processed with `read-from-string` to obtain a
value. 
