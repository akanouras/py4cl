* Introduction

Py4CL is a bridge between Common Lisp and Python, which enables Common
Lisp to call Python code. It uses streams to communicate with a
separate python process, the approach taken by [[https://github.com/marcoheisig/cl4py][cl4py]]. This is
different to the CFFI approach used by libraries such as [[https://github.com/pinterface/burgled-batteries][burgled-batteries]].

* Examples

The python subprocess can be started and stopped with =python-start= and =python-stop=.
=python-eval= evaluates an expression, converting the result to a suitable lisp type.

#+BEGIN_SRC lisp :results output
(asdf:load-system "py4cl")
(py4cl:python-start)

(princ (py4cl:python-eval "[i**2 for i in range(5)]")) ; => #(0 1 4 9 16)

(py4cl:python-stop)
#+END_SRC

#+RESULTS:
: #(0 1 4 9 16)

** Importing functions

Python functions can be made available in Lisp by using =defpyfun=. By
default this makes a function which can take any number of arguments.
#+BEGIN_SRC lisp
(asdf:load-system "py4cl")

(py4cl:python-start)
(py4cl:python-exec "import math")
(py4cl:defpyfun "math.sqrt")
(math.sqrt 42) ; => 6.4807405
#+END_SRC

#+RESULTS:
: 6.4807405

** Importing modules as packages

Python packages can be imported and mirrored in lisp packages.  as
usual. For example, to import [[https://matplotlib.org/][matplotlib]], and make its functions
available in the package =PLT= from within Lisp, and the module =plt=
in Python:
#+BEGIN_SRC lisp :session import-example
(asdf:load-system "py4cl")
(py4cl:python-import "matplotlib.pyplot" :as "plt") ; Creates PLT package
#+END_SRC

=python-import= starts python if it is not already running, so that
the available functions can be discovered.

The python docstrings are made available through =describe= or
=documentation= so we can run:
#+BEGIN_SRC  lisp :session import-examplqe
(describe 'plt:plot)
#+END_SRC

The =PLT= package can be used to make a simple plot:
#+BEGIN_SRC 
(plt:plot #(1 2 3 2 1))
(plt:show)
#+END_SRC

* Internal details
** Messages formats

Messages consist of a single character, followed by a number (N) in string
format e.g. "12", a newline, then N characters. 

*** Lisp to Python

The first character of the message describes the type of message:
- `x` means run `exec`, and is used for statements where no return
  value is expected e.g. `import` statements
- `e` means run `eval`, to evaluate an expression and return the
  result

*** Python to Lisp

The first character can be:
- `r` indicates a return value
- `e` indicates an error, followed by a message
- `c` indicates a callback, calling a lisp function and expecting a
  value to be sent back to python

Strings sent to Lisp are processed with `read-from-string` to obtain a
value. 
